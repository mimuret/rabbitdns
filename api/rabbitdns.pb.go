// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rabbitdns.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReloadRequest struct {
	Zonename             string   `protobuf:"bytes,1,opt,name=zonename,proto3" json:"zonename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReloadRequest) Reset()         { *m = ReloadRequest{} }
func (m *ReloadRequest) String() string { return proto.CompactTextString(m) }
func (*ReloadRequest) ProtoMessage()    {}
func (*ReloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{0}
}
func (m *ReloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReloadRequest.Unmarshal(m, b)
}
func (m *ReloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReloadRequest.Marshal(b, m, deterministic)
}
func (m *ReloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReloadRequest.Merge(m, src)
}
func (m *ReloadRequest) XXX_Size() int {
	return xxx_messageInfo_ReloadRequest.Size(m)
}
func (m *ReloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReloadRequest proto.InternalMessageInfo

func (m *ReloadRequest) GetZonename() string {
	if m != nil {
		return m.Zonename
	}
	return ""
}

type GetZonesResponse struct {
	Zones                []*Zone  `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetZonesResponse) Reset()         { *m = GetZonesResponse{} }
func (m *GetZonesResponse) String() string { return proto.CompactTextString(m) }
func (*GetZonesResponse) ProtoMessage()    {}
func (*GetZonesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{1}
}
func (m *GetZonesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetZonesResponse.Unmarshal(m, b)
}
func (m *GetZonesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetZonesResponse.Marshal(b, m, deterministic)
}
func (m *GetZonesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetZonesResponse.Merge(m, src)
}
func (m *GetZonesResponse) XXX_Size() int {
	return xxx_messageInfo_GetZonesResponse.Size(m)
}
func (m *GetZonesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetZonesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetZonesResponse proto.InternalMessageInfo

func (m *GetZonesResponse) GetZones() []*Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type GetServicesResponse struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetServicesResponse) Reset()         { *m = GetServicesResponse{} }
func (m *GetServicesResponse) String() string { return proto.CompactTextString(m) }
func (*GetServicesResponse) ProtoMessage()    {}
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{2}
}
func (m *GetServicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServicesResponse.Unmarshal(m, b)
}
func (m *GetServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServicesResponse.Marshal(b, m, deterministic)
}
func (m *GetServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServicesResponse.Merge(m, src)
}
func (m *GetServicesResponse) XXX_Size() int {
	return xxx_messageInfo_GetServicesResponse.Size(m)
}
func (m *GetServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServicesResponse proto.InternalMessageInfo

func (m *GetServicesResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetMonitorsResponse struct {
	Monitors             []*Monitor `protobuf:"bytes,1,rep,name=monitors,proto3" json:"monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetMonitorsResponse) Reset()         { *m = GetMonitorsResponse{} }
func (m *GetMonitorsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMonitorsResponse) ProtoMessage()    {}
func (*GetMonitorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{3}
}
func (m *GetMonitorsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMonitorsResponse.Unmarshal(m, b)
}
func (m *GetMonitorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMonitorsResponse.Marshal(b, m, deterministic)
}
func (m *GetMonitorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMonitorsResponse.Merge(m, src)
}
func (m *GetMonitorsResponse) XXX_Size() int {
	return xxx_messageInfo_GetMonitorsResponse.Size(m)
}
func (m *GetMonitorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMonitorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMonitorsResponse proto.InternalMessageInfo

func (m *GetMonitorsResponse) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type Zone struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Zone) Reset()         { *m = Zone{} }
func (m *Zone) String() string { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()    {}
func (*Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{4}
}
func (m *Zone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Zone.Unmarshal(m, b)
}
func (m *Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Zone.Marshal(b, m, deterministic)
}
func (m *Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zone.Merge(m, src)
}
func (m *Zone) XXX_Size() int {
	return xxx_messageInfo_Zone.Size(m)
}
func (m *Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_Zone proto.InternalMessageInfo

func (m *Zone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{5}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Monitor struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Monitor) Reset()         { *m = Monitor{} }
func (m *Monitor) String() string { return proto.CompactTextString(m) }
func (*Monitor) ProtoMessage()    {}
func (*Monitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1b9b0eb52f05c6a, []int{6}
}
func (m *Monitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monitor.Unmarshal(m, b)
}
func (m *Monitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monitor.Marshal(b, m, deterministic)
}
func (m *Monitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monitor.Merge(m, src)
}
func (m *Monitor) XXX_Size() int {
	return xxx_messageInfo_Monitor.Size(m)
}
func (m *Monitor) XXX_DiscardUnknown() {
	xxx_messageInfo_Monitor.DiscardUnknown(m)
}

var xxx_messageInfo_Monitor proto.InternalMessageInfo

func (m *Monitor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ReloadRequest)(nil), "api.ReloadRequest")
	proto.RegisterType((*GetZonesResponse)(nil), "api.GetZonesResponse")
	proto.RegisterType((*GetServicesResponse)(nil), "api.GetServicesResponse")
	proto.RegisterType((*GetMonitorsResponse)(nil), "api.GetMonitorsResponse")
	proto.RegisterType((*Zone)(nil), "api.Zone")
	proto.RegisterType((*Service)(nil), "api.Service")
	proto.RegisterType((*Monitor)(nil), "api.Monitor")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RabbitDNSClient is the client API for RabbitDNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RabbitDNSClient interface {
	Reconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ReloadZone(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetZones(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetZonesResponse, error)
	GetMonitors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMonitorsResponse, error)
	GetServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetServicesResponse, error)
}

type rabbitDNSClient struct {
	cc *grpc.ClientConn
}

func NewRabbitDNSClient(cc *grpc.ClientConn) RabbitDNSClient {
	return &rabbitDNSClient{cc}
}

func (c *rabbitDNSClient) Reconfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/Reconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitDNSClient) Reload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitDNSClient) ReloadZone(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/ReloadZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitDNSClient) GetZones(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetZonesResponse, error) {
	out := new(GetZonesResponse)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/GetZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitDNSClient) GetMonitors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMonitorsResponse, error) {
	out := new(GetMonitorsResponse)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/GetMonitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitDNSClient) GetServices(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/api.RabbitDNS/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RabbitDNSServer is the server API for RabbitDNS service.
type RabbitDNSServer interface {
	Reconfig(context.Context, *empty.Empty) (*empty.Empty, error)
	Reload(context.Context, *empty.Empty) (*empty.Empty, error)
	ReloadZone(context.Context, *ReloadRequest) (*empty.Empty, error)
	GetZones(context.Context, *empty.Empty) (*GetZonesResponse, error)
	GetMonitors(context.Context, *empty.Empty) (*GetMonitorsResponse, error)
	GetServices(context.Context, *empty.Empty) (*GetServicesResponse, error)
}

func RegisterRabbitDNSServer(s *grpc.Server, srv RabbitDNSServer) {
	s.RegisterService(&_RabbitDNS_serviceDesc, srv)
}

func _RabbitDNS_Reconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).Reconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/Reconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).Reconfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitDNS_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).Reload(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitDNS_ReloadZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).ReloadZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/ReloadZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).ReloadZone(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitDNS_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/GetZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).GetZones(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitDNS_GetMonitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).GetMonitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/GetMonitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).GetMonitors(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitDNS_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitDNSServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RabbitDNS/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitDNSServer).GetServices(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RabbitDNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RabbitDNS",
	HandlerType: (*RabbitDNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reconfig",
			Handler:    _RabbitDNS_Reconfig_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _RabbitDNS_Reload_Handler,
		},
		{
			MethodName: "ReloadZone",
			Handler:    _RabbitDNS_ReloadZone_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _RabbitDNS_GetZones_Handler,
		},
		{
			MethodName: "GetMonitors",
			Handler:    _RabbitDNS_GetMonitors_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _RabbitDNS_GetServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rabbitdns.proto",
}

func init() { proto.RegisterFile("rabbitdns.proto", fileDescriptor_b1b9b0eb52f05c6a) }

var fileDescriptor_b1b9b0eb52f05c6a = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcf, 0x4b, 0xf3, 0x30,
	0x18, 0xde, 0xd8, 0xbe, 0x7d, 0xdd, 0x3b, 0x45, 0x89, 0x28, 0xa3, 0x22, 0x8e, 0x9c, 0x06, 0x42,
	0x06, 0xdb, 0x4d, 0x05, 0x11, 0x94, 0x9d, 0xf4, 0x90, 0xdd, 0xbc, 0xb5, 0xdb, 0xbb, 0x11, 0xd8,
	0x92, 0xda, 0x64, 0x82, 0x9e, 0xfd, 0xc3, 0xa5, 0x49, 0x5a, 0xda, 0x62, 0x15, 0xbc, 0x6d, 0xcf,
	0xaf, 0x34, 0xcf, 0x13, 0x38, 0x4a, 0xa3, 0x38, 0x16, 0x66, 0x25, 0x35, 0x4b, 0x52, 0x65, 0x14,
	0xe9, 0x44, 0x89, 0x08, 0xcf, 0x37, 0x4a, 0x6d, 0xb6, 0x38, 0xb1, 0x50, 0xbc, 0x5f, 0x4f, 0x70,
	0x97, 0x98, 0x77, 0xa7, 0xa0, 0x57, 0x70, 0xc8, 0x71, 0xab, 0xa2, 0x15, 0xc7, 0xd7, 0x3d, 0x6a,
	0x43, 0x42, 0x08, 0x3e, 0x94, 0x44, 0x19, 0xed, 0x70, 0xd8, 0x1e, 0xb5, 0xc7, 0x7d, 0x5e, 0xfc,
	0xa7, 0x33, 0x38, 0x9e, 0xa3, 0x79, 0x51, 0x12, 0x35, 0x47, 0x9d, 0x28, 0xa9, 0x91, 0x5c, 0xc2,
	0xbf, 0x8c, 0xd7, 0xc3, 0xf6, 0xa8, 0x33, 0x1e, 0x4c, 0xfb, 0x2c, 0x4a, 0x04, 0xcb, 0x24, 0xdc,
	0xe1, 0xf4, 0x0e, 0x4e, 0xe6, 0x68, 0x16, 0x98, 0xbe, 0x89, 0x65, 0xc9, 0x37, 0x86, 0x40, 0x7b,
	0xcc, 0x5b, 0x0f, 0xac, 0xd5, 0x0b, 0x79, 0xc1, 0xfa, 0x80, 0x27, 0x25, 0x85, 0x51, 0x69, 0x25,
	0x60, 0xe7, 0xb1, 0x4a, 0x80, 0x17, 0xf2, 0x82, 0xa5, 0x21, 0x74, 0xb3, 0x0f, 0x22, 0x04, 0xba,
	0xa5, 0x6b, 0xd9, 0xdf, 0xf4, 0x02, 0xfe, 0xfb, 0x13, 0x9b, 0x68, 0x9f, 0xf7, 0x1d, 0x3d, 0xfd,
	0xec, 0x40, 0x9f, 0xdb, 0xce, 0x1f, 0x9e, 0x17, 0xe4, 0x16, 0x02, 0x8e, 0x4b, 0x25, 0xd7, 0x62,
	0x43, 0xce, 0x98, 0x6b, 0x9d, 0xe5, 0xad, 0xb3, 0xc7, 0xac, 0xf5, 0xb0, 0x01, 0xa7, 0x2d, 0x72,
	0x0d, 0x3d, 0xb7, 0xc4, 0x9f, 0xbc, 0xe0, 0xbc, 0xee, 0x9e, 0xb6, 0x87, 0xca, 0xac, 0x3f, 0x78,
	0x6f, 0x20, 0xc8, 0x47, 0x6d, 0x3c, 0xf9, 0xd4, 0x26, 0xd6, 0xb7, 0xa7, 0x2d, 0x72, 0x0f, 0x83,
	0xd2, 0x36, 0x8d, 0xfe, 0x61, 0xee, 0xaf, 0xaf, 0x58, 0x44, 0xe4, 0xef, 0xe3, 0xf7, 0x88, 0xfa,
	0x4b, 0xa2, 0xad, 0xb8, 0x67, 0xb5, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0x4b, 0x36,
	0xb5, 0x00, 0x03, 0x00, 0x00,
}
